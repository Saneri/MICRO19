;**************************************************************************
; AUTORES: PABLO ROSALES Y SANTERI SUITIALA
; PAREJA 9  
;*************************************************************************

DATOS SEGMENT 
	MATRIZ		DB		9 DUP (?)
	NOMBRE		DB		"MATRIZ",'$'
	CAD			DB		10 DUP ('$')
	RES			DW		0000H
	PREG_MAT1	DB		"ESCRIBE MATRIX 1: $"
	PREG_MAT2	DB		"ESCRIBE MATRIX 2: $"
	PREG_MAT3	DB		"ESCRIBE MATRIX 3: $"
	PREG_MAT4	DB		"ESCRIBE MATRIX 4: $"
	PREG_MAT5	DB		"ESCRIBE MATRIX 5: $"
	PREG_MAT6	DB		"ESCRIBE MATRIX 6: $"
	PREG_MAT7	DB		"ESCRIBE MATRIX 7: $"
	PREG_MAT8	DB		"ESCRIBE MATRIX 8: $"
	PREG_MAT9	DB		"ESCRIBE MATRIX 9: $"
	CLR_PANT 	DB 		1BH,"[2","J$"
	MAT1		DB		10 DUP (?)
	MAT2		DB		10 DUP (?)
	MAT3		DB		10 DUP (?)
	MAT4		DB		10 DUP (?)
	MAT5		DB		10 DUP (?)
	MAT6		DB		10 DUP (?)
	MAT7		DB		10 DUP (?)
	MAT8		DB		10 DUP (?)
	MAT9		DB		10 DUP (?)
	NUMERO		DW		0

DATOS ENDS 

PILA SEGMENT STACK "STACK" 
	DB 10H DUP (0)
PILA ENDS 

CODE SEGMENT 
ASSUME CS: CODE, DS: DATOS, SS: PILA 

INICIO PROC NEAR

	MOV AX, DATOS 
	MOV DS, AX 
	MOV AX, PILA 
	MOV SS, AX 
	MOV SP, 64 
	; COMIENZO DEL PROGRAMA 
	
	CALL PREGUNTAMATRIZ ; pregunta los 9 numeros

	CALL STRCONVERSION ; convertir los numeros preguntados y mover a matriz	

	CALL CALCULAR
	
	MOV RES, CX
	
	;PRIMERA LINEA
	CALL TAB
	CALL BARRA 
	
	MOV AH, 00
	MOV AL, MATRIZ[0]
	
	MOV BH, 129
	CMP BH, AL
	JAE POS0
	CALL NEGATIVO
	NEG AL
	MOV AH, 00H
POS0:	LEA SI, CAD
	CALL HEX2DEC
	
	LEA DX, CAD
	MOV AH, 9
	INT 21H
	CALL RESET
	
	CALL TAB
	
	MOV AH, 00	
	MOV AL, MATRIZ[1]
	
	MOV BH, 129
	CMP BH, AL
	JAE POS1
	CALL NEGATIVO
	NEG AL
	MOV AH, 00H
POS1:	LEA SI, CAD
	CALL HEX2DEC
	
	LEA DX, CAD
	MOV AH, 9
	INT 21H
	CALL RESET
	
	CALL TAB
	
	MOV AH, 00	
	MOV AL, MATRIZ[2]
	
	MOV BH, 129
	CMP BH, AL
	JAE POS2
	CALL NEGATIVO
	NEG AL
	MOV AH, 00H
POS2:	LEA SI, CAD
	CALL HEX2DEC
	
	LEA DX, CAD
	MOV AH, 9
	INT 21H
	CALL RESET
	
	CALL BARRA
	CALL SALTO 
	
	;SEGUNDA LINEA
	MOV DX, OFFSET NOMBRE
	MOV AH, 9
	INT 21H
	CALL IGUAL
	
	CALL TAB
	CALL BARRA 
	
	MOV AH, 00
	MOV AL, MATRIZ[3]
	
	MOV BH, 129
	CMP BH, AL
	JAE POS3
	CALL NEGATIVO
	NEG AL
	MOV AH, 00H
POS3:	LEA SI, CAD
	CALL HEX2DEC
	
	LEA DX, CAD
	MOV AH, 9
	INT 21H
	CALL RESET
	
	CALL TAB
	
	MOV AH, 00	
	MOV AL, MATRIZ[4]
	
	MOV BH, 129
	CMP BH, AL
	JAE POS4
	CALL NEGATIVO
	NEG AL
	MOV AH, 00H
POS4:	LEA SI, CAD
	CALL HEX2DEC
	
	LEA DX, CAD
	MOV AH, 9
	INT 21H
	CALL RESET
	
	CALL TAB
	
	MOV AH, 00	
	MOV AL, MATRIZ[5]
	
	MOV BH, 129
	CMP BH, AL
	JAE POS5
	CALL NEGATIVO
	NEG AL
	MOV AH, 00H
POS5:	LEA SI, CAD
	CALL HEX2DEC
	
	LEA DX, CAD
	MOV AH, 9
	INT 21H
	CALL RESET
	
	CALL BARRA
	CALL ESPACIO 
	CALL IGUAL 
	CALL ESPACIO
	
	
	MOV AX, RES
	
	MOV BL, 129
	MOV BH, 00H
	CMP BX, AX
	JAE POS
	NEG AX
POS:	LEA SI, CAD
	CALL HEX2DEC
	
	MOV AX, RES
	
	MOV BL, 129
	MOV BH, 00H
	CMP BX, AX
	JAE POSA
	CALL NEGATIVO
POSA:	LEA DX, CAD 	;SE REALIZAN DOS COMPARACIONES PORQUE CUANDO SE IMPRIME EL SIMBOLO MENOS "-"
	MOV AH, 9			;'AH' SE CAMBIA A "02", PISANDO ASI EL RESULTADO DE LA MATRIZ
	INT 21H
	CALL RESET
	
	CALL SALTO
	
	;TERCERA LINEA
	CALL TAB
	CALL BARRA 

	MOV AH, 00
	MOV AL, MATRIZ[6]
	
	MOV BH, 129
	CMP BH, AL
	JAE POS6
	CALL NEGATIVO
	NEG AL
	MOV AH, 00H
POS6:	LEA SI, CAD
	CALL HEX2DEC
	
	LEA DX, CAD
	MOV AH, 9
	INT 21H
	CALL RESET
	
	CALL TAB
	
	MOV AH, 00	
	MOV AL, MATRIZ[7]
	
	MOV BH, 129
	CMP BH, AL
	JAE POS7
	CALL NEGATIVO
	NEG AL
	MOV AH, 00H
POS7:	LEA SI, CAD
	CALL HEX2DEC
	
	LEA DX, CAD
	MOV AH, 9
	INT 21H
	CALL RESET
	
	CALL TAB
	
	MOV AH, 00	
	MOV AL, MATRIZ[8]
	
	MOV BH, 129
	CMP BH, AL
	JAE POS8
	CALL NEGATIVO
	NEG AL
	MOV AH, 00H
POS8:	LEA SI, CAD
	CALL HEX2DEC
	
	LEA DX, CAD
	MOV AH, 9
	INT 21H
	CALL RESET
	
	CALL BARRA
	CALL SALTO
	
	; FIN DEL PROGRAMA 
	MOV AX, 4C00H 
	INT 21H 
 
INICIO ENDP

PREGUNTAMATRIZ PROC NEAR ; PREGUNTA A CADA UNO DE LAS CELDAS DE MATRIZ

	CALL CLEARPANT
	MOV AH, 09H
	MOV DX, OFFSET PREG_MAT1
	INT 21H

	MOV AH, 0AH
	MOV DX, OFFSET MAT1
	MOV MAT1[0], 10
	INT 21H

	CALL CLEARPANT
	MOV AH, 09H
	MOV DX, OFFSET PREG_MAT2
	INT 21H

	MOV AH, 0AH
	MOV DX, OFFSET MAT2
	MOV MAT2[0], 10
	INT 21H

	CALL CLEARPANT
	MOV AH, 09H
	MOV DX, OFFSET PREG_MAT3
	INT 21H

	MOV AH, 0AH
	MOV DX, OFFSET MAT3
	MOV MAT3[0], 10
	INT 21H

	CALL CLEARPANT
	MOV AH, 09H
	MOV DX, OFFSET PREG_MAT4
	INT 21H

	MOV AH, 0AH
	MOV DX, OFFSET MAT4
	MOV MAT4[0], 10
	INT 21H

	CALL CLEARPANT
	MOV AH, 09H
	MOV DX, OFFSET PREG_MAT5
	INT 21H

	MOV AH, 0AH
	MOV DX, OFFSET MAT5
	MOV MAT5[0], 10
	INT 21H

	CALL CLEARPANT
	MOV AH, 09H
	MOV DX, OFFSET PREG_MAT6
	INT 21H

	MOV AH, 0AH
	MOV DX, OFFSET MAT6
	MOV MAT6[0], 10
	INT 21H
	
	CALL CLEARPANT
	MOV AH, 09H
	MOV DX, OFFSET PREG_MAT7
	INT 21H

	MOV AH, 0AH
	MOV DX, OFFSET MAT7
	MOV MAT7[0], 10
	INT 21H

	CALL CLEARPANT
	MOV AH, 09H
	MOV DX, OFFSET PREG_MAT8
	INT 21H

	MOV AH, 0AH
	MOV DX, OFFSET MAT8
	MOV MAT8[0], 10
	INT 21H
	
	CALL CLEARPANT
	MOV AH, 09H
	MOV DX, OFFSET PREG_MAT9
	INT 21H

	MOV AH, 0AH
	MOV DX, OFFSET MAT9
	MOV MAT9[0], 10
	INT 21H
	
	RET
PREGUNTAMATRIZ ENDP

STRCONVERSION PROC NEAR
	MOV BX, 0

ITERSTR1:		; CONVERTIR UN CARACTER
	MOV DX, 0
	MOV DL, MAT1[BX+2]
	SUB DL, 30H 	; CONVERCION: STRING -> INT
	PUSH DX		; METE CARACTER CONVERTIDO A PILA
	INC BX
	CMP BL, MAT1[1]
	JNE ITERSTR1
	
	; METE EL NUMERO DESDE LA PILA A MATRIZ
	MOV NUMERO, 0
	MOV CX, 1	
ITERINT1:
	POP DX

	MOV AX, CX
	MUL DX		; DX * 10^N
	MOV DX, AX
	PUSH DX
	MOV AX, 10
	MUL CX	 	; CX * 10
	MOV CX, AX 	
	POP DX	
	ADD NUMERO, DX

	DEC BL
	CMP BL, 0
	JNE ITERINT1

	; PREPARA A QUE SE MUEVE DX A MATRIZ
	MOV DX, NUMERO
	MOV MATRIZ[0], DL

ITERSTR2:		; CONVERTIR UN CARACTER
	MOV DL, MAT2[BX+2]
	SUB DL, 30H 	; CONVERCION: STRING -> INT
	PUSH DX		; METE CARACTER CONVERTIDO A PILA
	INC BX
	CMP BL, MAT2[1]
	JNE ITERSTR2
	
	; METE EL NUMERO DESDE LA PILA A MATRIZ
	MOV NUMERO, 0
	MOV CX, 1	
ITERINT2:
	POP DX

	MOV AX, CX
	MUL DX		; DX * 10^N
	MOV DX, AX
	PUSH DX
	MOV AX, 10
	MUL CX	 	; CX * 10
	MOV CX, AX 	
	POP DX	
	ADD NUMERO, DX

	DEC BL
	CMP BL, 0
	JNE ITERINT2

	; PREPARA A QUE SE MUEVE DX A MATRIZ
	MOV DX, NUMERO
	MOV MATRIZ[1], DL

ITERSTR3:		; CONVERTIR UN CARACTER
	MOV DL, MAT3[BX+2]
	SUB DL, 30H 	; CONVERCION: STRING -> INT
	PUSH DX		; METE CARACTER CONVERTIDO A PILA
	INC BX
	CMP BL, MAT3[1]
	JNE ITERSTR3
	
	; METE EL NUMERO DESDE LA PILA A MATRIZ
	MOV NUMERO, 0
	MOV CX, 1	
ITERINT3:
	POP DX

	MOV AX, CX
	MUL DX		; DX * 10^N
	MOV DX, AX
	PUSH DX
	MOV AX, 10
	MUL CX	 	; CX * 10
	MOV CX, AX 	
	POP DX	
	ADD NUMERO, DX

	DEC BL
	CMP BL, 0
	JNE ITERINT3

	; PREPARA A QUE SE MUEVE DX A MATRIZ
	MOV DX, NUMERO
	MOV MATRIZ[2], DL

ITERSTR4:		; CONVERTIR UN CARACTER
	MOV DL, MAT4[BX+2]
	SUB DL, 30H 	; CONVERCION: STRING -> INT
	PUSH DX		; METE CARACTER CONVERTIDO A PILA
	INC BX
	CMP BL, MAT4[1]
	JNE ITERSTR4
	
	; METE EL NUMERO DESDE LA PILA A MATRIZ
	MOV NUMERO, 0
	MOV CX, 1	
ITERINT4:
	POP DX

	MOV AX, CX
	MUL DX		; DX * 10^N
	MOV DX, AX
	PUSH DX
	MOV AX, 10
	MUL CX	 	; CX * 10
	MOV CX, AX 	
	POP DX	
	ADD NUMERO, DX

	DEC BL
	CMP BL, 0
	JNE ITERINT4

	; PREPARA A QUE SE MUEVE DX A MATRIZ
	MOV DX, NUMERO
	MOV MATRIZ[3], DL

ITERSTR5:		; CONVERTIR UN CARACTER
	MOV DL, MAT5[BX+2]
	SUB DL, 30H 	; CONVERCION: STRING -> INT
	PUSH DX		; METE CARACTER CONVERTIDO A PILA
	INC BX
	CMP BL, MAT5[1]
	JNE ITERSTR5
	
	; METE EL NUMERO DESDE LA PILA A MATRIZ
	MOV NUMERO, 0
	MOV CX, 1	
ITERINT5:
	POP DX

	MOV AX, CX
	MUL DX		; DX * 10^N
	MOV DX, AX
	PUSH DX
	MOV AX, 10
	MUL CX	 	; CX * 10
	MOV CX, AX 	
	POP DX	
	ADD NUMERO, DX

	DEC BL
	CMP BL, 0
	JNE ITERINT5

	; PREPARA A QUE SE MUEVE DX A MATRIZ
	MOV DX, NUMERO
	MOV MATRIZ[4], DL

ITERSTR6:		; CONVERTIR UN CARACTER
	MOV DL, MAT6[BX+2]
	SUB DL, 30H 	; CONVERCION: STRING -> INT
	PUSH DX		; METE CARACTER CONVERTIDO A PILA
	INC BX
	CMP BL, MAT6[1]
	JNE ITERSTR6
	
	; METE EL NUMERO DESDE LA PILA A MATRIZ
	MOV NUMERO, 0
	MOV CX, 1	
ITERINT6:
	POP DX

	MOV AX, CX
	MUL DX		; DX * 10^N
	MOV DX, AX
	PUSH DX
	MOV AX, 10
	MUL CX	 	; CX * 10
	MOV CX, AX 	
	POP DX	
	ADD NUMERO, DX

	DEC BL
	CMP BL, 0
	JNE ITERINT6

	; PREPARA A QUE SE MUEVE DX A MATRIZ
	MOV DX, NUMERO
	MOV MATRIZ[5], DL

ITERSTR7:		; CONVERTIR UN CARACTER
	MOV DL, MAT7[BX+2]
	SUB DL, 30H 	; CONVERCION: STRING -> INT
	PUSH DX		; METE CARACTER CONVERTIDO A PILA
	INC BX
	CMP BL, MAT7[1]
	JNE ITERSTR7
	
	; METE EL NUMERO DESDE LA PILA A MATRIZ
	MOV NUMERO, 0
	MOV CX, 1	
ITERINT7:
	POP DX

	MOV AX, CX
	MUL DX		; DX * 10^N
	MOV DX, AX
	PUSH DX
	MOV AX, 10
	MUL CX	 	; CX * 10
	MOV CX, AX 	
	POP DX	
	ADD NUMERO, DX

	DEC BL
	CMP BL, 0
	JNE ITERINT7

	; PREPARA A QUE SE MUEVE DX A MATRIZ
	MOV DX, NUMERO
	MOV MATRIZ[6], DL

ITERSTR8:		; CONVERTIR UN CARACTER
	MOV DL, MAT8[BX+2]
	SUB DL, 30H 	; CONVERCION: STRING -> INT
	PUSH DX		; METE CARACTER CONVERTIDO A PILA
	INC BX
	CMP BL, MAT8[1]
	JNE ITERSTR8
	
	; METE EL NUMERO DESDE LA PILA A MATRIZ
	MOV NUMERO, 0
	MOV CX, 1	
ITERINT8:
	POP DX

	MOV AX, CX
	MUL DX		; DX * 10^N
	MOV DX, AX
	PUSH DX
	MOV AX, 10
	MUL CX	 	; CX * 10
	MOV CX, AX 	
	POP DX	
	ADD NUMERO, DX

	DEC BL
	CMP BL, 0
	JNE ITERINT8

	; PREPARA A QUE SE MUEVE DX A MATRIZ
	MOV DX, NUMERO
	MOV MATRIZ[7], DL

ITERSTR9:		; CONVERTIR UN CARACTER
	MOV DL, MAT9[BX+2]
	SUB DL, 30H 	; CONVERCION: STRING -> INT
	PUSH DX		; METE CARACTER CONVERTIDO A PILA
	INC BX
	CMP BL, MAT9[1]
	JNE ITERSTR9
	
	; METE EL NUMERO DESDE LA PILA A MATRIZ
	MOV NUMERO, 0
	MOV CX, 1	
ITERINT9:
	POP DX

	MOV AX, CX
	MUL DX		; DX * 10^N
	MOV DX, AX
	PUSH DX
	MOV AX, 10
	MUL CX	 	; CX * 10
	MOV CX, AX 	
	POP DX	
	ADD NUMERO, DX

	DEC BL
	CMP BL, 0
	JNE ITERINT9

	; PREPARA A QUE SE MUEVE DX A MATRIZ
	MOV DX, NUMERO
	MOV MATRIZ[8], DL

	RET
STRCONVERSION ENDP

CLEARPANT PROC NEAR ; BORRAR LA PANTALLA
	MOV AH, 09H
	MOV DX, OFFSET CLR_PANT
	INT 21H
	RET
CLEARPANT ENDP

TAB PROC NEAR ; FUNCION QUE ESCRIBE UN TABULADO HORIZONTAL POR PANTALLA 
	MOV AH, 2
	MOV DX, 9H 
	INT 21H
	RET 
TAB ENDP 

BARRA PROC NEAR ;FUNCION PARA ESCRIBIR UNA BARRA LATERAL POR PANTALLA "|"
	MOV AH, 2
	MOV DX, 7CH
	INT 21H
	RET
BARRA ENDP

ESPACIO PROC NEAR ;FUNCION PARA ESCRIBIR UN ESPACIO POR PANTALLA
	MOV AH, 2
	MOV DX, 20H
	INT 21H
	RET
ESPACIO ENDP

IGUAL PROC NEAR ;FUNCION PARA ESCRIBIR POR PANTALLA EL SIMBOLO IGUAL "=" 
	MOV AH, 2
	MOV DX, 3DH
	INT 21H
	RET
IGUAL ENDP

SALTO PROC NEAR ; FUNCION PARA ESCIBIR UN SALTO DE LINEA POR PANTALLA
	MOV AH, 2
	MOV DX, 0AH
	INT 21H
	RET
SALTO ENDP

NEGATIVO PROC NEAR ;FUNCION PARA ESCRIBIR POR PANTALLA EL SIMBOLO MENOS "-" 
	MOV AH, 2
	MOV DX, 2DH 
	INT 21H
	RET 
NEGATIVO ENDP
	
HEX2DEC PROC NEAR ;FUNCION PARA CONVERTIR UN NUMERO HEXADECIMAL A CADENA ASCII
	MOV CX, 0
	MOV BX, 10
	
LOOP1:	MOV DX, 0
	DIV BX
	ADD DL, 30H
	PUSH DX
	INC CX
	CMP AX, 9
	JG LOOP1
	
	ADD AL, 30H
	MOV [SI], AL
	
LOOP2:	POP AX
	INC SI
	MOV [SI], AL
	LOOP LOOP2
	RET	
HEX2DEC ENDP

RESET PROC NEAR ;FUNCION QUE RESETEA LA CADENA QUE SE IMPRIME
	MOV CAD[0], '$'
	MOV CAD[1], '$'
	MOV CAD[2], '$'
	MOV CAD[3], '$'
	MOV CAD[4], '$'
	MOV CAD[5], '$'
	MOV CAD[6], '$'
	MOV CAD[7], '$'
	MOV CAD[8], '$'
	MOV CAD[9], '$'
RESET ENDP
	
CALCULAR PROC NEAR ;FUNCION CALCULAR DETERMINANTE DE MATRIZ (3X3)
	MOV AL, MATRIZ[8];[2][2]
	MOV AH, MATRIZ[4];[1][1]
	IMUL AH
	MOV BX, AX
	MOV AL, MATRIZ[7];[2][1]
	MOV AH, MATRIZ[5];[1][2]
	IMUL AH
	MOV CX, AX 	
	SUB BX, CX
	MOV AL, MATRIZ[0];[0][0]
	IMUL BX
	PUSH AX
	
	MOV AL, MATRIZ[3];[1][0]
	MOV AH, MATRIZ[8];[2][2]
	IMUL AH
	MOV BX, AX
	MOV AL, MATRIZ[5];[1][2]
	MOV AH, MATRIZ[6];[2][0]
	IMUL AH
	MOV CX, AX 	
	SUB BX, CX
	MOV AL, MATRIZ[1];[0][1]
	IMUL BX
	PUSH AX
	
	MOV AL, MATRIZ[3];[1][0]
	MOV AH, MATRIZ[7];[2][1]
	IMUL AH
	MOV BX, AX
	MOV AL, MATRIZ[6];[2][0]
	MOV AH, MATRIZ[4];[1][1]
	IMUL AH
	MOV CX, AX 	
	SUB BX, CX
	MOV AL, MATRIZ[2];[0][2]
	IMUL BX
	PUSH AX
	
	POP CX
	POP BX
	POP AX
	SUB AX, BX 
	ADD CX, AX
	RET
CALCULAR ENDP
	
CODE ENDS 
END INICIO 